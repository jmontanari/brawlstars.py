# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Stats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'healing_done': 'int',
        'deaths': 'int',
        'damage_dealt': 'int',
        'kills': 'int',
        'average_latency': 'int',
        'damage_received': 'int',
        'total_damage_to_safe': 'int',
        'total_damage_to_pets': 'int',
        'siege_damage_to_robot': 'int',
        'siege_bolts_collected': 'int',
        'brawl_ball_goals_scored': 'int',
        'gem_grab_gems_collected': 'int',
        'gem_grab_gems_lost': 'int',
        'bounty_stars_gained': 'int',
        'bounty_stars_lost': 'int',
        'super_used_count': 'int',
        'gadget_used_count': 'int',
        'bounty_picked_middle_star': 'bool',
        'match_end_kill_streak': 'int',
        'max_kill_streak': 'int',
        'hot_zone_inside_zone_percentage': 'int',
        'healing_done_to_self': 'int',
        'healing_done_to_team_mates': 'int',
        'objectives_recovered': 'int',
        'objectives_stolen': 'int',
        'brawl_ball_shots_on_goal': 'int',
        'brawl_ball_shots_saved': 'int'
    }

    attribute_map = {
        'healing_done': 'healingDone',
        'deaths': 'deaths',
        'damage_dealt': 'damageDealt',
        'kills': 'kills',
        'average_latency': 'averageLatency',
        'damage_received': 'damageReceived',
        'total_damage_to_safe': 'totalDamageToSafe',
        'total_damage_to_pets': 'totalDamageToPets',
        'siege_damage_to_robot': 'siegeDamageToRobot',
        'siege_bolts_collected': 'siegeBoltsCollected',
        'brawl_ball_goals_scored': 'brawlBallGoalsScored',
        'gem_grab_gems_collected': 'gemGrabGemsCollected',
        'gem_grab_gems_lost': 'gemGrabGemsLost',
        'bounty_stars_gained': 'bountyStarsGained',
        'bounty_stars_lost': 'bountyStarsLost',
        'super_used_count': 'superUsedCount',
        'gadget_used_count': 'gadgetUsedCount',
        'bounty_picked_middle_star': 'bountyPickedMiddleStar',
        'match_end_kill_streak': 'matchEndKillStreak',
        'max_kill_streak': 'maxKillStreak',
        'hot_zone_inside_zone_percentage': 'hotZoneInsideZonePercentage',
        'healing_done_to_self': 'healingDoneToSelf',
        'healing_done_to_team_mates': 'healingDoneToTeamMates',
        'objectives_recovered': 'objectivesRecovered',
        'objectives_stolen': 'objectivesStolen',
        'brawl_ball_shots_on_goal': 'brawlBallShotsOnGoal',
        'brawl_ball_shots_saved': 'brawlBallShotsSaved'
    }

    def __init__(self, healing_done=None, deaths=None, damage_dealt=None, kills=None, average_latency=None, damage_received=None, total_damage_to_safe=None, total_damage_to_pets=None, siege_damage_to_robot=None, siege_bolts_collected=None, brawl_ball_goals_scored=None, gem_grab_gems_collected=None, gem_grab_gems_lost=None, bounty_stars_gained=None, bounty_stars_lost=None, super_used_count=None, gadget_used_count=None, bounty_picked_middle_star=None, match_end_kill_streak=None, max_kill_streak=None, hot_zone_inside_zone_percentage=None, healing_done_to_self=None, healing_done_to_team_mates=None, objectives_recovered=None, objectives_stolen=None, brawl_ball_shots_on_goal=None, brawl_ball_shots_saved=None):  # noqa: E501
        """Stats - a model defined in Swagger"""  # noqa: E501
        self._healing_done = None
        self._deaths = None
        self._damage_dealt = None
        self._kills = None
        self._average_latency = None
        self._damage_received = None
        self._total_damage_to_safe = None
        self._total_damage_to_pets = None
        self._siege_damage_to_robot = None
        self._siege_bolts_collected = None
        self._brawl_ball_goals_scored = None
        self._gem_grab_gems_collected = None
        self._gem_grab_gems_lost = None
        self._bounty_stars_gained = None
        self._bounty_stars_lost = None
        self._super_used_count = None
        self._gadget_used_count = None
        self._bounty_picked_middle_star = None
        self._match_end_kill_streak = None
        self._max_kill_streak = None
        self._hot_zone_inside_zone_percentage = None
        self._healing_done_to_self = None
        self._healing_done_to_team_mates = None
        self._objectives_recovered = None
        self._objectives_stolen = None
        self._brawl_ball_shots_on_goal = None
        self._brawl_ball_shots_saved = None
        self.discriminator = None
        if healing_done is not None:
            self.healing_done = healing_done
        if deaths is not None:
            self.deaths = deaths
        if damage_dealt is not None:
            self.damage_dealt = damage_dealt
        if kills is not None:
            self.kills = kills
        if average_latency is not None:
            self.average_latency = average_latency
        if damage_received is not None:
            self.damage_received = damage_received
        if total_damage_to_safe is not None:
            self.total_damage_to_safe = total_damage_to_safe
        if total_damage_to_pets is not None:
            self.total_damage_to_pets = total_damage_to_pets
        if siege_damage_to_robot is not None:
            self.siege_damage_to_robot = siege_damage_to_robot
        if siege_bolts_collected is not None:
            self.siege_bolts_collected = siege_bolts_collected
        if brawl_ball_goals_scored is not None:
            self.brawl_ball_goals_scored = brawl_ball_goals_scored
        if gem_grab_gems_collected is not None:
            self.gem_grab_gems_collected = gem_grab_gems_collected
        if gem_grab_gems_lost is not None:
            self.gem_grab_gems_lost = gem_grab_gems_lost
        if bounty_stars_gained is not None:
            self.bounty_stars_gained = bounty_stars_gained
        if bounty_stars_lost is not None:
            self.bounty_stars_lost = bounty_stars_lost
        if super_used_count is not None:
            self.super_used_count = super_used_count
        if gadget_used_count is not None:
            self.gadget_used_count = gadget_used_count
        if bounty_picked_middle_star is not None:
            self.bounty_picked_middle_star = bounty_picked_middle_star
        if match_end_kill_streak is not None:
            self.match_end_kill_streak = match_end_kill_streak
        if max_kill_streak is not None:
            self.max_kill_streak = max_kill_streak
        if hot_zone_inside_zone_percentage is not None:
            self.hot_zone_inside_zone_percentage = hot_zone_inside_zone_percentage
        if healing_done_to_self is not None:
            self.healing_done_to_self = healing_done_to_self
        if healing_done_to_team_mates is not None:
            self.healing_done_to_team_mates = healing_done_to_team_mates
        if objectives_recovered is not None:
            self.objectives_recovered = objectives_recovered
        if objectives_stolen is not None:
            self.objectives_stolen = objectives_stolen
        if brawl_ball_shots_on_goal is not None:
            self.brawl_ball_shots_on_goal = brawl_ball_shots_on_goal
        if brawl_ball_shots_saved is not None:
            self.brawl_ball_shots_saved = brawl_ball_shots_saved

    @property
    def healing_done(self):
        """Gets the healing_done of this Stats.  # noqa: E501


        :return: The healing_done of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._healing_done

    @healing_done.setter
    def healing_done(self, healing_done):
        """Sets the healing_done of this Stats.


        :param healing_done: The healing_done of this Stats.  # noqa: E501
        :type: int
        """

        self._healing_done = healing_done

    @property
    def deaths(self):
        """Gets the deaths of this Stats.  # noqa: E501


        :return: The deaths of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._deaths

    @deaths.setter
    def deaths(self, deaths):
        """Sets the deaths of this Stats.


        :param deaths: The deaths of this Stats.  # noqa: E501
        :type: int
        """

        self._deaths = deaths

    @property
    def damage_dealt(self):
        """Gets the damage_dealt of this Stats.  # noqa: E501


        :return: The damage_dealt of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._damage_dealt

    @damage_dealt.setter
    def damage_dealt(self, damage_dealt):
        """Sets the damage_dealt of this Stats.


        :param damage_dealt: The damage_dealt of this Stats.  # noqa: E501
        :type: int
        """

        self._damage_dealt = damage_dealt

    @property
    def kills(self):
        """Gets the kills of this Stats.  # noqa: E501


        :return: The kills of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._kills

    @kills.setter
    def kills(self, kills):
        """Sets the kills of this Stats.


        :param kills: The kills of this Stats.  # noqa: E501
        :type: int
        """

        self._kills = kills

    @property
    def average_latency(self):
        """Gets the average_latency of this Stats.  # noqa: E501


        :return: The average_latency of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._average_latency

    @average_latency.setter
    def average_latency(self, average_latency):
        """Sets the average_latency of this Stats.


        :param average_latency: The average_latency of this Stats.  # noqa: E501
        :type: int
        """

        self._average_latency = average_latency

    @property
    def damage_received(self):
        """Gets the damage_received of this Stats.  # noqa: E501


        :return: The damage_received of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._damage_received

    @damage_received.setter
    def damage_received(self, damage_received):
        """Sets the damage_received of this Stats.


        :param damage_received: The damage_received of this Stats.  # noqa: E501
        :type: int
        """

        self._damage_received = damage_received

    @property
    def total_damage_to_safe(self):
        """Gets the total_damage_to_safe of this Stats.  # noqa: E501


        :return: The total_damage_to_safe of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._total_damage_to_safe

    @total_damage_to_safe.setter
    def total_damage_to_safe(self, total_damage_to_safe):
        """Sets the total_damage_to_safe of this Stats.


        :param total_damage_to_safe: The total_damage_to_safe of this Stats.  # noqa: E501
        :type: int
        """

        self._total_damage_to_safe = total_damage_to_safe

    @property
    def total_damage_to_pets(self):
        """Gets the total_damage_to_pets of this Stats.  # noqa: E501


        :return: The total_damage_to_pets of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._total_damage_to_pets

    @total_damage_to_pets.setter
    def total_damage_to_pets(self, total_damage_to_pets):
        """Sets the total_damage_to_pets of this Stats.


        :param total_damage_to_pets: The total_damage_to_pets of this Stats.  # noqa: E501
        :type: int
        """

        self._total_damage_to_pets = total_damage_to_pets

    @property
    def siege_damage_to_robot(self):
        """Gets the siege_damage_to_robot of this Stats.  # noqa: E501


        :return: The siege_damage_to_robot of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._siege_damage_to_robot

    @siege_damage_to_robot.setter
    def siege_damage_to_robot(self, siege_damage_to_robot):
        """Sets the siege_damage_to_robot of this Stats.


        :param siege_damage_to_robot: The siege_damage_to_robot of this Stats.  # noqa: E501
        :type: int
        """

        self._siege_damage_to_robot = siege_damage_to_robot

    @property
    def siege_bolts_collected(self):
        """Gets the siege_bolts_collected of this Stats.  # noqa: E501


        :return: The siege_bolts_collected of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._siege_bolts_collected

    @siege_bolts_collected.setter
    def siege_bolts_collected(self, siege_bolts_collected):
        """Sets the siege_bolts_collected of this Stats.


        :param siege_bolts_collected: The siege_bolts_collected of this Stats.  # noqa: E501
        :type: int
        """

        self._siege_bolts_collected = siege_bolts_collected

    @property
    def brawl_ball_goals_scored(self):
        """Gets the brawl_ball_goals_scored of this Stats.  # noqa: E501


        :return: The brawl_ball_goals_scored of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._brawl_ball_goals_scored

    @brawl_ball_goals_scored.setter
    def brawl_ball_goals_scored(self, brawl_ball_goals_scored):
        """Sets the brawl_ball_goals_scored of this Stats.


        :param brawl_ball_goals_scored: The brawl_ball_goals_scored of this Stats.  # noqa: E501
        :type: int
        """

        self._brawl_ball_goals_scored = brawl_ball_goals_scored

    @property
    def gem_grab_gems_collected(self):
        """Gets the gem_grab_gems_collected of this Stats.  # noqa: E501


        :return: The gem_grab_gems_collected of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._gem_grab_gems_collected

    @gem_grab_gems_collected.setter
    def gem_grab_gems_collected(self, gem_grab_gems_collected):
        """Sets the gem_grab_gems_collected of this Stats.


        :param gem_grab_gems_collected: The gem_grab_gems_collected of this Stats.  # noqa: E501
        :type: int
        """

        self._gem_grab_gems_collected = gem_grab_gems_collected

    @property
    def gem_grab_gems_lost(self):
        """Gets the gem_grab_gems_lost of this Stats.  # noqa: E501


        :return: The gem_grab_gems_lost of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._gem_grab_gems_lost

    @gem_grab_gems_lost.setter
    def gem_grab_gems_lost(self, gem_grab_gems_lost):
        """Sets the gem_grab_gems_lost of this Stats.


        :param gem_grab_gems_lost: The gem_grab_gems_lost of this Stats.  # noqa: E501
        :type: int
        """

        self._gem_grab_gems_lost = gem_grab_gems_lost

    @property
    def bounty_stars_gained(self):
        """Gets the bounty_stars_gained of this Stats.  # noqa: E501


        :return: The bounty_stars_gained of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._bounty_stars_gained

    @bounty_stars_gained.setter
    def bounty_stars_gained(self, bounty_stars_gained):
        """Sets the bounty_stars_gained of this Stats.


        :param bounty_stars_gained: The bounty_stars_gained of this Stats.  # noqa: E501
        :type: int
        """

        self._bounty_stars_gained = bounty_stars_gained

    @property
    def bounty_stars_lost(self):
        """Gets the bounty_stars_lost of this Stats.  # noqa: E501


        :return: The bounty_stars_lost of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._bounty_stars_lost

    @bounty_stars_lost.setter
    def bounty_stars_lost(self, bounty_stars_lost):
        """Sets the bounty_stars_lost of this Stats.


        :param bounty_stars_lost: The bounty_stars_lost of this Stats.  # noqa: E501
        :type: int
        """

        self._bounty_stars_lost = bounty_stars_lost

    @property
    def super_used_count(self):
        """Gets the super_used_count of this Stats.  # noqa: E501


        :return: The super_used_count of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._super_used_count

    @super_used_count.setter
    def super_used_count(self, super_used_count):
        """Sets the super_used_count of this Stats.


        :param super_used_count: The super_used_count of this Stats.  # noqa: E501
        :type: int
        """

        self._super_used_count = super_used_count

    @property
    def gadget_used_count(self):
        """Gets the gadget_used_count of this Stats.  # noqa: E501


        :return: The gadget_used_count of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._gadget_used_count

    @gadget_used_count.setter
    def gadget_used_count(self, gadget_used_count):
        """Sets the gadget_used_count of this Stats.


        :param gadget_used_count: The gadget_used_count of this Stats.  # noqa: E501
        :type: int
        """

        self._gadget_used_count = gadget_used_count

    @property
    def bounty_picked_middle_star(self):
        """Gets the bounty_picked_middle_star of this Stats.  # noqa: E501


        :return: The bounty_picked_middle_star of this Stats.  # noqa: E501
        :rtype: bool
        """
        return self._bounty_picked_middle_star

    @bounty_picked_middle_star.setter
    def bounty_picked_middle_star(self, bounty_picked_middle_star):
        """Sets the bounty_picked_middle_star of this Stats.


        :param bounty_picked_middle_star: The bounty_picked_middle_star of this Stats.  # noqa: E501
        :type: bool
        """

        self._bounty_picked_middle_star = bounty_picked_middle_star

    @property
    def match_end_kill_streak(self):
        """Gets the match_end_kill_streak of this Stats.  # noqa: E501


        :return: The match_end_kill_streak of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._match_end_kill_streak

    @match_end_kill_streak.setter
    def match_end_kill_streak(self, match_end_kill_streak):
        """Sets the match_end_kill_streak of this Stats.


        :param match_end_kill_streak: The match_end_kill_streak of this Stats.  # noqa: E501
        :type: int
        """

        self._match_end_kill_streak = match_end_kill_streak

    @property
    def max_kill_streak(self):
        """Gets the max_kill_streak of this Stats.  # noqa: E501


        :return: The max_kill_streak of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._max_kill_streak

    @max_kill_streak.setter
    def max_kill_streak(self, max_kill_streak):
        """Sets the max_kill_streak of this Stats.


        :param max_kill_streak: The max_kill_streak of this Stats.  # noqa: E501
        :type: int
        """

        self._max_kill_streak = max_kill_streak

    @property
    def hot_zone_inside_zone_percentage(self):
        """Gets the hot_zone_inside_zone_percentage of this Stats.  # noqa: E501


        :return: The hot_zone_inside_zone_percentage of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._hot_zone_inside_zone_percentage

    @hot_zone_inside_zone_percentage.setter
    def hot_zone_inside_zone_percentage(self, hot_zone_inside_zone_percentage):
        """Sets the hot_zone_inside_zone_percentage of this Stats.


        :param hot_zone_inside_zone_percentage: The hot_zone_inside_zone_percentage of this Stats.  # noqa: E501
        :type: int
        """

        self._hot_zone_inside_zone_percentage = hot_zone_inside_zone_percentage

    @property
    def healing_done_to_self(self):
        """Gets the healing_done_to_self of this Stats.  # noqa: E501


        :return: The healing_done_to_self of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._healing_done_to_self

    @healing_done_to_self.setter
    def healing_done_to_self(self, healing_done_to_self):
        """Sets the healing_done_to_self of this Stats.


        :param healing_done_to_self: The healing_done_to_self of this Stats.  # noqa: E501
        :type: int
        """

        self._healing_done_to_self = healing_done_to_self

    @property
    def healing_done_to_team_mates(self):
        """Gets the healing_done_to_team_mates of this Stats.  # noqa: E501


        :return: The healing_done_to_team_mates of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._healing_done_to_team_mates

    @healing_done_to_team_mates.setter
    def healing_done_to_team_mates(self, healing_done_to_team_mates):
        """Sets the healing_done_to_team_mates of this Stats.


        :param healing_done_to_team_mates: The healing_done_to_team_mates of this Stats.  # noqa: E501
        :type: int
        """

        self._healing_done_to_team_mates = healing_done_to_team_mates

    @property
    def objectives_recovered(self):
        """Gets the objectives_recovered of this Stats.  # noqa: E501


        :return: The objectives_recovered of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._objectives_recovered

    @objectives_recovered.setter
    def objectives_recovered(self, objectives_recovered):
        """Sets the objectives_recovered of this Stats.


        :param objectives_recovered: The objectives_recovered of this Stats.  # noqa: E501
        :type: int
        """

        self._objectives_recovered = objectives_recovered

    @property
    def objectives_stolen(self):
        """Gets the objectives_stolen of this Stats.  # noqa: E501


        :return: The objectives_stolen of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._objectives_stolen

    @objectives_stolen.setter
    def objectives_stolen(self, objectives_stolen):
        """Sets the objectives_stolen of this Stats.


        :param objectives_stolen: The objectives_stolen of this Stats.  # noqa: E501
        :type: int
        """

        self._objectives_stolen = objectives_stolen

    @property
    def brawl_ball_shots_on_goal(self):
        """Gets the brawl_ball_shots_on_goal of this Stats.  # noqa: E501


        :return: The brawl_ball_shots_on_goal of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._brawl_ball_shots_on_goal

    @brawl_ball_shots_on_goal.setter
    def brawl_ball_shots_on_goal(self, brawl_ball_shots_on_goal):
        """Sets the brawl_ball_shots_on_goal of this Stats.


        :param brawl_ball_shots_on_goal: The brawl_ball_shots_on_goal of this Stats.  # noqa: E501
        :type: int
        """

        self._brawl_ball_shots_on_goal = brawl_ball_shots_on_goal

    @property
    def brawl_ball_shots_saved(self):
        """Gets the brawl_ball_shots_saved of this Stats.  # noqa: E501


        :return: The brawl_ball_shots_saved of this Stats.  # noqa: E501
        :rtype: int
        """
        return self._brawl_ball_shots_saved

    @brawl_ball_shots_saved.setter
    def brawl_ball_shots_saved(self, brawl_ball_shots_saved):
        """Sets the brawl_ball_shots_saved of this Stats.


        :param brawl_ball_shots_saved: The brawl_ball_shots_saved of this Stats.  # noqa: E501
        :type: int
        """

        self._brawl_ball_shots_saved = brawl_ball_shots_saved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Stats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
