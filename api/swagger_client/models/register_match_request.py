# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RegisterMatchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'players': 'RegisterMatchRequestPlayers',
        'location_id': 'int',
        'wins_required': 'int',
        'gadgets_allowed': 'bool',
        'banned_brawlers': 'BannedBrawlerList',
        'timer_preset': 'str'
    }

    attribute_map = {
        'mode': 'mode',
        'players': 'players',
        'location_id': 'locationId',
        'wins_required': 'winsRequired',
        'gadgets_allowed': 'gadgetsAllowed',
        'banned_brawlers': 'bannedBrawlers',
        'timer_preset': 'timerPreset'
    }

    def __init__(self, mode=None, players=None, location_id=None, wins_required=None, gadgets_allowed=None, banned_brawlers=None, timer_preset=None):  # noqa: E501
        """RegisterMatchRequest - a model defined in Swagger"""  # noqa: E501
        self._mode = None
        self._players = None
        self._location_id = None
        self._wins_required = None
        self._gadgets_allowed = None
        self._banned_brawlers = None
        self._timer_preset = None
        self.discriminator = None
        if mode is not None:
            self.mode = mode
        if players is not None:
            self.players = players
        if location_id is not None:
            self.location_id = location_id
        if wins_required is not None:
            self.wins_required = wins_required
        if gadgets_allowed is not None:
            self.gadgets_allowed = gadgets_allowed
        if banned_brawlers is not None:
            self.banned_brawlers = banned_brawlers
        if timer_preset is not None:
            self.timer_preset = timer_preset

    @property
    def mode(self):
        """Gets the mode of this RegisterMatchRequest.  # noqa: E501


        :return: The mode of this RegisterMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this RegisterMatchRequest.


        :param mode: The mode of this RegisterMatchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["regular", "powerMatch"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def players(self):
        """Gets the players of this RegisterMatchRequest.  # noqa: E501


        :return: The players of this RegisterMatchRequest.  # noqa: E501
        :rtype: RegisterMatchRequestPlayers
        """
        return self._players

    @players.setter
    def players(self, players):
        """Sets the players of this RegisterMatchRequest.


        :param players: The players of this RegisterMatchRequest.  # noqa: E501
        :type: RegisterMatchRequestPlayers
        """

        self._players = players

    @property
    def location_id(self):
        """Gets the location_id of this RegisterMatchRequest.  # noqa: E501


        :return: The location_id of this RegisterMatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this RegisterMatchRequest.


        :param location_id: The location_id of this RegisterMatchRequest.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def wins_required(self):
        """Gets the wins_required of this RegisterMatchRequest.  # noqa: E501


        :return: The wins_required of this RegisterMatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._wins_required

    @wins_required.setter
    def wins_required(self, wins_required):
        """Sets the wins_required of this RegisterMatchRequest.


        :param wins_required: The wins_required of this RegisterMatchRequest.  # noqa: E501
        :type: int
        """

        self._wins_required = wins_required

    @property
    def gadgets_allowed(self):
        """Gets the gadgets_allowed of this RegisterMatchRequest.  # noqa: E501


        :return: The gadgets_allowed of this RegisterMatchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._gadgets_allowed

    @gadgets_allowed.setter
    def gadgets_allowed(self, gadgets_allowed):
        """Sets the gadgets_allowed of this RegisterMatchRequest.


        :param gadgets_allowed: The gadgets_allowed of this RegisterMatchRequest.  # noqa: E501
        :type: bool
        """

        self._gadgets_allowed = gadgets_allowed

    @property
    def banned_brawlers(self):
        """Gets the banned_brawlers of this RegisterMatchRequest.  # noqa: E501


        :return: The banned_brawlers of this RegisterMatchRequest.  # noqa: E501
        :rtype: BannedBrawlerList
        """
        return self._banned_brawlers

    @banned_brawlers.setter
    def banned_brawlers(self, banned_brawlers):
        """Sets the banned_brawlers of this RegisterMatchRequest.


        :param banned_brawlers: The banned_brawlers of this RegisterMatchRequest.  # noqa: E501
        :type: BannedBrawlerList
        """

        self._banned_brawlers = banned_brawlers

    @property
    def timer_preset(self):
        """Gets the timer_preset of this RegisterMatchRequest.  # noqa: E501


        :return: The timer_preset of this RegisterMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._timer_preset

    @timer_preset.setter
    def timer_preset(self, timer_preset):
        """Sets the timer_preset of this RegisterMatchRequest.


        :param timer_preset: The timer_preset of this RegisterMatchRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["default", "longer", "longest"]  # noqa: E501
        if timer_preset not in allowed_values:
            raise ValueError(
                "Invalid value for `timer_preset` ({0}), must be one of {1}"  # noqa: E501
                .format(timer_preset, allowed_values)
            )

        self._timer_preset = timer_preset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegisterMatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegisterMatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
