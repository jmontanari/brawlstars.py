# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayerMatchStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brawler': 'BrawlerInfo',
        'is_in_battle': 'bool',
        'is_ready': 'bool',
        'is_online': 'bool',
        'has_joined': 'bool',
        'tag': 'str'
    }

    attribute_map = {
        'brawler': 'brawler',
        'is_in_battle': 'isInBattle',
        'is_ready': 'isReady',
        'is_online': 'isOnline',
        'has_joined': 'hasJoined',
        'tag': 'tag'
    }

    def __init__(self, brawler=None, is_in_battle=None, is_ready=None, is_online=None, has_joined=None, tag=None):  # noqa: E501
        """PlayerMatchStatus - a model defined in Swagger"""  # noqa: E501
        self._brawler = None
        self._is_in_battle = None
        self._is_ready = None
        self._is_online = None
        self._has_joined = None
        self._tag = None
        self.discriminator = None
        if brawler is not None:
            self.brawler = brawler
        if is_in_battle is not None:
            self.is_in_battle = is_in_battle
        if is_ready is not None:
            self.is_ready = is_ready
        if is_online is not None:
            self.is_online = is_online
        if has_joined is not None:
            self.has_joined = has_joined
        if tag is not None:
            self.tag = tag

    @property
    def brawler(self):
        """Gets the brawler of this PlayerMatchStatus.  # noqa: E501


        :return: The brawler of this PlayerMatchStatus.  # noqa: E501
        :rtype: BrawlerInfo
        """
        return self._brawler

    @brawler.setter
    def brawler(self, brawler):
        """Sets the brawler of this PlayerMatchStatus.


        :param brawler: The brawler of this PlayerMatchStatus.  # noqa: E501
        :type: BrawlerInfo
        """

        self._brawler = brawler

    @property
    def is_in_battle(self):
        """Gets the is_in_battle of this PlayerMatchStatus.  # noqa: E501


        :return: The is_in_battle of this PlayerMatchStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_battle

    @is_in_battle.setter
    def is_in_battle(self, is_in_battle):
        """Sets the is_in_battle of this PlayerMatchStatus.


        :param is_in_battle: The is_in_battle of this PlayerMatchStatus.  # noqa: E501
        :type: bool
        """

        self._is_in_battle = is_in_battle

    @property
    def is_ready(self):
        """Gets the is_ready of this PlayerMatchStatus.  # noqa: E501


        :return: The is_ready of this PlayerMatchStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_ready

    @is_ready.setter
    def is_ready(self, is_ready):
        """Sets the is_ready of this PlayerMatchStatus.


        :param is_ready: The is_ready of this PlayerMatchStatus.  # noqa: E501
        :type: bool
        """

        self._is_ready = is_ready

    @property
    def is_online(self):
        """Gets the is_online of this PlayerMatchStatus.  # noqa: E501


        :return: The is_online of this PlayerMatchStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this PlayerMatchStatus.


        :param is_online: The is_online of this PlayerMatchStatus.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    @property
    def has_joined(self):
        """Gets the has_joined of this PlayerMatchStatus.  # noqa: E501


        :return: The has_joined of this PlayerMatchStatus.  # noqa: E501
        :rtype: bool
        """
        return self._has_joined

    @has_joined.setter
    def has_joined(self, has_joined):
        """Sets the has_joined of this PlayerMatchStatus.


        :param has_joined: The has_joined of this PlayerMatchStatus.  # noqa: E501
        :type: bool
        """

        self._has_joined = has_joined

    @property
    def tag(self):
        """Gets the tag of this PlayerMatchStatus.  # noqa: E501


        :return: The tag of this PlayerMatchStatus.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this PlayerMatchStatus.


        :param tag: The tag of this PlayerMatchStatus.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerMatchStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerMatchStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
