# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from brawlstars.models.completed_game import CompletedGame
from brawlstars.models.match_team import MatchTeam
from brawlstars.models.player_match_status import PlayerMatchStatus
from typing import Optional, Set
from typing_extensions import Self

class Match(BaseModel):
    """
    Match
    """ # noqa: E501
    initiative_side: Optional[StrictInt] = Field(default=None, alias="initiativeSide")
    round: Optional[StrictInt] = None
    teams: Optional[List[MatchTeam]] = None
    termination_reason: Optional[StrictStr] = Field(default=None, alias="terminationReason")
    games: Optional[List[CompletedGame]] = None
    phase: Optional[StrictStr] = None
    players: Optional[List[PlayerMatchStatus]] = None
    state: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["initiativeSide", "round", "teams", "terminationReason", "games", "phase", "players", "state", "id"]

    @field_validator('termination_reason')
    def termination_reason_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['none', 'playerDisconnected', 'playerNotResponding', 'technicalError', 'matchTooLong', 'other']):
            raise ValueError("must be one of enum values ('none', 'playerDisconnected', 'playerNotResponding', 'technicalError', 'matchTooLong', 'other')")
        return value

    @field_validator('phase')
    def phase_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['init', 'banHeroes', 'pickHeroes', 'finalPreparation', 'battle', 'matchResult', 'ending']):
            raise ValueError("must be one of enum values ('init', 'banHeroes', 'pickHeroes', 'finalPreparation', 'battle', 'matchResult', 'ending')")
        return value

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['open', 'cancelled', 'completed']):
            raise ValueError("must be one of enum values ('open', 'cancelled', 'completed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Match from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item_teams in self.teams:
                if _item_teams:
                    _items.append(_item_teams.to_dict())
            _dict['teams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in games (list)
        _items = []
        if self.games:
            for _item_games in self.games:
                if _item_games:
                    _items.append(_item_games.to_dict())
            _dict['games'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in players (list)
        _items = []
        if self.players:
            for _item_players in self.players:
                if _item_players:
                    _items.append(_item_players.to_dict())
            _dict['players'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Match from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "initiativeSide": obj.get("initiativeSide"),
            "round": obj.get("round"),
            "teams": [MatchTeam.from_dict(_item) for _item in obj["teams"]] if obj.get("teams") is not None else None,
            "terminationReason": obj.get("terminationReason"),
            "games": [CompletedGame.from_dict(_item) for _item in obj["games"]] if obj.get("games") is not None else None,
            "phase": obj.get("phase"),
            "players": [PlayerMatchStatus.from_dict(_item) for _item in obj["players"]] if obj.get("players") is not None else None,
            "state": obj.get("state"),
            "id": obj.get("id")
        })
        return _obj


