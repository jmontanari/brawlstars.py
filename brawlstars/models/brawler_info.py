# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from brawlstars.models.accessory import Accessory
from brawlstars.models.gear_info import GearInfo
from brawlstars.models.star_power import StarPower
from typing import Optional, Set
from typing_extensions import Self

class BrawlerInfo(BaseModel):
    """
    BrawlerInfo
    """ # noqa: E501
    trophy_change: Optional[StrictInt] = Field(default=None, alias="trophyChange")
    gears: Optional[List[GearInfo]] = None
    star_power: Optional[StarPower] = Field(default=None, alias="starPower")
    gadget: Optional[Accessory] = None
    power: Optional[StrictInt] = None
    trophies: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["trophyChange", "gears", "starPower", "gadget", "power", "trophies", "name", "id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrawlerInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in gears (list)
        _items = []
        if self.gears:
            for _item_gears in self.gears:
                if _item_gears:
                    _items.append(_item_gears.to_dict())
            _dict['gears'] = _items
        # override the default output from pydantic by calling `to_dict()` of star_power
        if self.star_power:
            _dict['starPower'] = self.star_power.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gadget
        if self.gadget:
            _dict['gadget'] = self.gadget.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrawlerInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trophyChange": obj.get("trophyChange"),
            "gears": [GearInfo.from_dict(_item) for _item in obj["gears"]] if obj.get("gears") is not None else None,
            "starPower": StarPower.from_dict(obj["starPower"]) if obj.get("starPower") is not None else None,
            "gadget": Accessory.from_dict(obj["gadget"]) if obj.get("gadget") is not None else None,
            "power": obj.get("power"),
            "trophies": obj.get("trophies"),
            "name": obj.get("name"),
            "id": obj.get("id")
        })
        return _obj


