# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Stats(BaseModel):
    """
    Stats
    """ # noqa: E501
    healing_done: Optional[StrictInt] = Field(default=None, alias="healingDone")
    deaths: Optional[StrictInt] = None
    damage_dealt: Optional[StrictInt] = Field(default=None, alias="damageDealt")
    kills: Optional[StrictInt] = None
    average_latency: Optional[StrictInt] = Field(default=None, alias="averageLatency")
    damage_received: Optional[StrictInt] = Field(default=None, alias="damageReceived")
    total_damage_to_safe: Optional[StrictInt] = Field(default=None, alias="totalDamageToSafe")
    total_damage_to_pets: Optional[StrictInt] = Field(default=None, alias="totalDamageToPets")
    siege_damage_to_robot: Optional[StrictInt] = Field(default=None, alias="siegeDamageToRobot")
    siege_bolts_collected: Optional[StrictInt] = Field(default=None, alias="siegeBoltsCollected")
    brawl_ball_goals_scored: Optional[StrictInt] = Field(default=None, alias="brawlBallGoalsScored")
    gem_grab_gems_collected: Optional[StrictInt] = Field(default=None, alias="gemGrabGemsCollected")
    gem_grab_gems_lost: Optional[StrictInt] = Field(default=None, alias="gemGrabGemsLost")
    bounty_stars_gained: Optional[StrictInt] = Field(default=None, alias="bountyStarsGained")
    bounty_stars_lost: Optional[StrictInt] = Field(default=None, alias="bountyStarsLost")
    super_used_count: Optional[StrictInt] = Field(default=None, alias="superUsedCount")
    gadget_used_count: Optional[StrictInt] = Field(default=None, alias="gadgetUsedCount")
    bounty_picked_middle_star: Optional[StrictBool] = Field(default=None, alias="bountyPickedMiddleStar")
    match_end_kill_streak: Optional[StrictInt] = Field(default=None, alias="matchEndKillStreak")
    max_kill_streak: Optional[StrictInt] = Field(default=None, alias="maxKillStreak")
    hot_zone_inside_zone_percentage: Optional[StrictInt] = Field(default=None, alias="hotZoneInsideZonePercentage")
    healing_done_to_self: Optional[StrictInt] = Field(default=None, alias="healingDoneToSelf")
    healing_done_to_team_mates: Optional[StrictInt] = Field(default=None, alias="healingDoneToTeamMates")
    objectives_recovered: Optional[StrictInt] = Field(default=None, alias="objectivesRecovered")
    objectives_stolen: Optional[StrictInt] = Field(default=None, alias="objectivesStolen")
    brawl_ball_shots_on_goal: Optional[StrictInt] = Field(default=None, alias="brawlBallShotsOnGoal")
    brawl_ball_shots_saved: Optional[StrictInt] = Field(default=None, alias="brawlBallShotsSaved")
    __properties: ClassVar[List[str]] = ["healingDone", "deaths", "damageDealt", "kills", "averageLatency", "damageReceived", "totalDamageToSafe", "totalDamageToPets", "siegeDamageToRobot", "siegeBoltsCollected", "brawlBallGoalsScored", "gemGrabGemsCollected", "gemGrabGemsLost", "bountyStarsGained", "bountyStarsLost", "superUsedCount", "gadgetUsedCount", "bountyPickedMiddleStar", "matchEndKillStreak", "maxKillStreak", "hotZoneInsideZonePercentage", "healingDoneToSelf", "healingDoneToTeamMates", "objectivesRecovered", "objectivesStolen", "brawlBallShotsOnGoal", "brawlBallShotsSaved"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Stats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Stats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "healingDone": obj.get("healingDone"),
            "deaths": obj.get("deaths"),
            "damageDealt": obj.get("damageDealt"),
            "kills": obj.get("kills"),
            "averageLatency": obj.get("averageLatency"),
            "damageReceived": obj.get("damageReceived"),
            "totalDamageToSafe": obj.get("totalDamageToSafe"),
            "totalDamageToPets": obj.get("totalDamageToPets"),
            "siegeDamageToRobot": obj.get("siegeDamageToRobot"),
            "siegeBoltsCollected": obj.get("siegeBoltsCollected"),
            "brawlBallGoalsScored": obj.get("brawlBallGoalsScored"),
            "gemGrabGemsCollected": obj.get("gemGrabGemsCollected"),
            "gemGrabGemsLost": obj.get("gemGrabGemsLost"),
            "bountyStarsGained": obj.get("bountyStarsGained"),
            "bountyStarsLost": obj.get("bountyStarsLost"),
            "superUsedCount": obj.get("superUsedCount"),
            "gadgetUsedCount": obj.get("gadgetUsedCount"),
            "bountyPickedMiddleStar": obj.get("bountyPickedMiddleStar"),
            "matchEndKillStreak": obj.get("matchEndKillStreak"),
            "maxKillStreak": obj.get("maxKillStreak"),
            "hotZoneInsideZonePercentage": obj.get("hotZoneInsideZonePercentage"),
            "healingDoneToSelf": obj.get("healingDoneToSelf"),
            "healingDoneToTeamMates": obj.get("healingDoneToTeamMates"),
            "objectivesRecovered": obj.get("objectivesRecovered"),
            "objectivesStolen": obj.get("objectivesStolen"),
            "brawlBallShotsOnGoal": obj.get("brawlBallShotsOnGoal"),
            "brawlBallShotsSaved": obj.get("brawlBallShotsSaved")
        })
        return _obj


