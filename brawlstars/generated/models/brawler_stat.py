# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from brawlstars.generated.models.accessory import Accessory
from brawlstars.generated.models.gear_stat import GearStat
from brawlstars.generated.models.star_power import StarPower

class BrawlerStat(BaseModel):
    """
    BrawlerStat
    """
    gadgets: Optional[conlist(Accessory)] = None
    star_powers: Optional[conlist(StarPower)] = Field(default=None, alias="starPowers")
    id: Optional[StrictInt] = None
    rank: Optional[StrictInt] = None
    trophies: Optional[StrictInt] = None
    highest_trophies: Optional[StrictInt] = Field(default=None, alias="highestTrophies")
    power: Optional[StrictInt] = None
    gears: Optional[conlist(GearStat)] = None
    name: Optional[Dict[str, Any]] = None
    __properties = ["gadgets", "starPowers", "id", "rank", "trophies", "highestTrophies", "power", "gears", "name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BrawlerStat:
        """Create an instance of BrawlerStat from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in gadgets (list)
        _items = []
        if self.gadgets:
            for _item in self.gadgets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['gadgets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in star_powers (list)
        _items = []
        if self.star_powers:
            for _item in self.star_powers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['starPowers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gears (list)
        _items = []
        if self.gears:
            for _item in self.gears:
                if _item:
                    _items.append(_item.to_dict())
            _dict['gears'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BrawlerStat:
        """Create an instance of BrawlerStat from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BrawlerStat.parse_obj(obj)

        _obj = BrawlerStat.parse_obj({
            "gadgets": [Accessory.from_dict(_item) for _item in obj.get("gadgets")] if obj.get("gadgets") is not None else None,
            "star_powers": [StarPower.from_dict(_item) for _item in obj.get("starPowers")] if obj.get("starPowers") is not None else None,
            "id": obj.get("id"),
            "rank": obj.get("rank"),
            "trophies": obj.get("trophies"),
            "highest_trophies": obj.get("highestTrophies"),
            "power": obj.get("power"),
            "gears": [GearStat.from_dict(_item) for _item in obj.get("gears")] if obj.get("gears") is not None else None,
            "name": obj.get("name")
        })
        return _obj


