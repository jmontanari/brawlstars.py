# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator
from brawlstars.generated.models.club_member import ClubMember

class Club(BaseModel):
    """
    Club
    """
    tag: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    trophies: Optional[StrictInt] = None
    required_trophies: Optional[StrictInt] = Field(default=None, alias="requiredTrophies")
    members: Optional[conlist(ClubMember)] = None
    type: Optional[StrictStr] = None
    badge_id: Optional[StrictInt] = Field(default=None, alias="badgeId")
    __properties = ["tag", "name", "description", "trophies", "requiredTrophies", "members", "type", "badgeId"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('open', 'inviteOnly', 'closed', 'unknown',):
            raise ValueError("must be one of enum values ('open', 'inviteOnly', 'closed', 'unknown')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Club:
        """Create an instance of Club from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        _items = []
        if self.members:
            for _item in self.members:
                if _item:
                    _items.append(_item.to_dict())
            _dict['members'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Club:
        """Create an instance of Club from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Club.parse_obj(obj)

        _obj = Club.parse_obj({
            "tag": obj.get("tag"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "trophies": obj.get("trophies"),
            "required_trophies": obj.get("requiredTrophies"),
            "members": [ClubMember.from_dict(_item) for _item in obj.get("members")] if obj.get("members") is not None else None,
            "type": obj.get("type"),
            "badge_id": obj.get("badgeId")
        })
        return _obj


