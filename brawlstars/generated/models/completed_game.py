# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from brawlstars.generated.models.completed_game_team import CompletedGameTeam
from brawlstars.generated.models.match_location import MatchLocation

class CompletedGame(BaseModel):
    """
    CompletedGame
    """
    teams: Optional[conlist(CompletedGameTeam)] = None
    duration: Optional[StrictInt] = None
    location: Optional[MatchLocation] = None
    replay_id: Optional[StrictStr] = Field(default=None, alias="replayId")
    __properties = ["teams", "duration", "location", "replayId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CompletedGame:
        """Create an instance of CompletedGame from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item in self.teams:
                if _item:
                    _items.append(_item.to_dict())
            _dict['teams'] = _items
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CompletedGame:
        """Create an instance of CompletedGame from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CompletedGame.parse_obj(obj)

        _obj = CompletedGame.parse_obj({
            "teams": [CompletedGameTeam.from_dict(_item) for _item in obj.get("teams")] if obj.get("teams") is not None else None,
            "duration": obj.get("duration"),
            "location": MatchLocation.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "replay_id": obj.get("replayId")
        })
        return _obj


