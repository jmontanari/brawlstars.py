# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from brawlstars.generated.models.brawler_stat import BrawlerStat
from brawlstars.generated.models.player_club import PlayerClub
from brawlstars.generated.models.player_icon import PlayerIcon

class Player(BaseModel):
    """
    Player
    """
    club: Optional[PlayerClub] = None
    is_qualified_from_championship_challenge: Optional[StrictBool] = Field(default=None, alias="isQualifiedFromChampionshipChallenge")
    var_3vs3_victories: Optional[StrictInt] = Field(default=None, alias="3vs3Victories")
    icon: Optional[PlayerIcon] = None
    tag: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    trophies: Optional[StrictInt] = None
    exp_level: Optional[StrictInt] = Field(default=None, alias="expLevel")
    exp_points: Optional[StrictInt] = Field(default=None, alias="expPoints")
    highest_trophies: Optional[StrictInt] = Field(default=None, alias="highestTrophies")
    solo_victories: Optional[StrictInt] = Field(default=None, alias="soloVictories")
    duo_victories: Optional[StrictInt] = Field(default=None, alias="duoVictories")
    best_robo_rumble_time: Optional[StrictInt] = Field(default=None, alias="bestRoboRumbleTime")
    best_time_as_big_brawler: Optional[StrictInt] = Field(default=None, alias="bestTimeAsBigBrawler")
    brawlers: Optional[conlist(BrawlerStat)] = None
    name_color: Optional[StrictStr] = Field(default=None, alias="nameColor")
    __properties = ["club", "isQualifiedFromChampionshipChallenge", "3vs3Victories", "icon", "tag", "name", "trophies", "expLevel", "expPoints", "highestTrophies", "soloVictories", "duoVictories", "bestRoboRumbleTime", "bestTimeAsBigBrawler", "brawlers", "nameColor"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Player:
        """Create an instance of Player from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of club
        if self.club:
            _dict['club'] = self.club.to_dict()
        # override the default output from pydantic by calling `to_dict()` of icon
        if self.icon:
            _dict['icon'] = self.icon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in brawlers (list)
        _items = []
        if self.brawlers:
            for _item in self.brawlers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['brawlers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Player:
        """Create an instance of Player from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Player.parse_obj(obj)

        _obj = Player.parse_obj({
            "club": PlayerClub.from_dict(obj.get("club")) if obj.get("club") is not None else None,
            "is_qualified_from_championship_challenge": obj.get("isQualifiedFromChampionshipChallenge"),
            "var_3vs3_victories": obj.get("3vs3Victories"),
            "icon": PlayerIcon.from_dict(obj.get("icon")) if obj.get("icon") is not None else None,
            "tag": obj.get("tag"),
            "name": obj.get("name"),
            "trophies": obj.get("trophies"),
            "exp_level": obj.get("expLevel"),
            "exp_points": obj.get("expPoints"),
            "highest_trophies": obj.get("highestTrophies"),
            "solo_victories": obj.get("soloVictories"),
            "duo_victories": obj.get("duoVictories"),
            "best_robo_rumble_time": obj.get("bestRoboRumbleTime"),
            "best_time_as_big_brawler": obj.get("bestTimeAsBigBrawler"),
            "brawlers": [BrawlerStat.from_dict(_item) for _item in obj.get("brawlers")] if obj.get("brawlers") is not None else None,
            "name_color": obj.get("nameColor")
        })
        return _obj


