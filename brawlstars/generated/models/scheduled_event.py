# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from brawlstars.generated.models.scheduled_event_location import ScheduledEventLocation

class ScheduledEvent(BaseModel):
    """
    ScheduledEvent
    """
    event: Optional[ScheduledEventLocation] = None
    slot_id: Optional[StrictInt] = Field(default=None, alias="slotId")
    start_time: Optional[StrictStr] = Field(default=None, alias="startTime")
    end_time: Optional[StrictStr] = Field(default=None, alias="endTime")
    __properties = ["event", "slotId", "startTime", "endTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScheduledEvent:
        """Create an instance of ScheduledEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict['event'] = self.event.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScheduledEvent:
        """Create an instance of ScheduledEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScheduledEvent.parse_obj(obj)

        _obj = ScheduledEvent.parse_obj({
            "event": ScheduledEventLocation.from_dict(obj.get("event")) if obj.get("event") is not None else None,
            "slot_id": obj.get("slotId"),
            "start_time": obj.get("startTime"),
            "end_time": obj.get("endTime")
        })
        return _obj


