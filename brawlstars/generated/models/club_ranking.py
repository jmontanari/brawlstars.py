# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ClubRanking(BaseModel):
    """
    ClubRanking
    """
    tag: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    trophies: Optional[StrictInt] = None
    rank: Optional[StrictInt] = None
    member_count: Optional[StrictInt] = Field(default=None, alias="memberCount")
    badge_id: Optional[StrictInt] = Field(default=None, alias="badgeId")
    __properties = ["tag", "name", "trophies", "rank", "memberCount", "badgeId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClubRanking:
        """Create an instance of ClubRanking from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClubRanking:
        """Create an instance of ClubRanking from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClubRanking.parse_obj(obj)

        _obj = ClubRanking.parse_obj({
            "tag": obj.get("tag"),
            "name": obj.get("name"),
            "trophies": obj.get("trophies"),
            "rank": obj.get("rank"),
            "member_count": obj.get("memberCount"),
            "badge_id": obj.get("badgeId")
        })
        return _obj


