# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist, validator

class ScheduledEventLocation(BaseModel):
    """
    ScheduledEventLocation
    """
    mode: Optional[StrictStr] = None
    modifiers: Optional[conlist(StrictStr)] = None
    id: Optional[StrictInt] = None
    map: Optional[Dict[str, Any]] = None
    __properties = ["mode", "modifiers", "id", "map"]

    @validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('soloShowdown', 'duoShowdown', 'heist', 'bounty', 'siege', 'gemGrab', 'brawlBall', 'bigGame', 'bossFight', 'roboRumble', 'takedown', 'loneStar', 'presentPlunder', 'hotZone', 'superCityRampage', 'knockout', 'volleyBrawl', 'basketBrawl', 'holdTheTrophy', 'trophyThieves', 'duels', 'wipeout', 'payload', 'botDrop', 'hunters', 'lastStand', 'snowtelThieves', 'pumpkinPlunder', 'trophyEscape', 'wipeout5V5', 'knockout5V5', 'gemGrab5V5', 'brawlBall5V5', 'godzillaCitySmash', 'paintBrawl', 'trioShowdown', 'zombiePlunder', 'jellyfishing', 'unknown',):
            raise ValueError("must be one of enum values ('soloShowdown', 'duoShowdown', 'heist', 'bounty', 'siege', 'gemGrab', 'brawlBall', 'bigGame', 'bossFight', 'roboRumble', 'takedown', 'loneStar', 'presentPlunder', 'hotZone', 'superCityRampage', 'knockout', 'volleyBrawl', 'basketBrawl', 'holdTheTrophy', 'trophyThieves', 'duels', 'wipeout', 'payload', 'botDrop', 'hunters', 'lastStand', 'snowtelThieves', 'pumpkinPlunder', 'trophyEscape', 'wipeout5V5', 'knockout5V5', 'gemGrab5V5', 'brawlBall5V5', 'godzillaCitySmash', 'paintBrawl', 'trioShowdown', 'zombiePlunder', 'jellyfishing', 'unknown')")
        return value

    @validator('modifiers')
    def modifiers_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('unknown', 'none', 'energyDrink', 'angryRobo', 'meteorShower', 'graveyardShift', 'healingMushrooms', 'bossFightRockets', 'takedownLasers', 'takedownChainLightning', 'takedownRockets', 'waves', 'hauntedBall', 'superCharge', 'fastBrawlers', 'showdown+', 'peekABoo', 'burningBall',):
                raise ValueError("each list item must be one of ('unknown', 'none', 'energyDrink', 'angryRobo', 'meteorShower', 'graveyardShift', 'healingMushrooms', 'bossFightRockets', 'takedownLasers', 'takedownChainLightning', 'takedownRockets', 'waves', 'hauntedBall', 'superCharge', 'fastBrawlers', 'showdown+', 'peekABoo', 'burningBall')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ScheduledEventLocation:
        """Create an instance of ScheduledEventLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ScheduledEventLocation:
        """Create an instance of ScheduledEventLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ScheduledEventLocation.parse_obj(obj)

        _obj = ScheduledEventLocation.parse_obj({
            "mode": obj.get("mode"),
            "modifiers": obj.get("modifiers"),
            "id": obj.get("id"),
            "map": obj.get("map")
        })
        return _obj


