# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt

class Stats(BaseModel):
    """
    Stats
    """
    healing_done: Optional[StrictInt] = Field(default=None, alias="healingDone")
    deaths: Optional[StrictInt] = None
    damage_dealt: Optional[StrictInt] = Field(default=None, alias="damageDealt")
    kills: Optional[StrictInt] = None
    average_latency: Optional[StrictInt] = Field(default=None, alias="averageLatency")
    damage_received: Optional[StrictInt] = Field(default=None, alias="damageReceived")
    total_damage_to_safe: Optional[StrictInt] = Field(default=None, alias="totalDamageToSafe")
    total_damage_to_pets: Optional[StrictInt] = Field(default=None, alias="totalDamageToPets")
    siege_damage_to_robot: Optional[StrictInt] = Field(default=None, alias="siegeDamageToRobot")
    siege_bolts_collected: Optional[StrictInt] = Field(default=None, alias="siegeBoltsCollected")
    brawl_ball_goals_scored: Optional[StrictInt] = Field(default=None, alias="brawlBallGoalsScored")
    gem_grab_gems_collected: Optional[StrictInt] = Field(default=None, alias="gemGrabGemsCollected")
    gem_grab_gems_lost: Optional[StrictInt] = Field(default=None, alias="gemGrabGemsLost")
    bounty_stars_gained: Optional[StrictInt] = Field(default=None, alias="bountyStarsGained")
    bounty_stars_lost: Optional[StrictInt] = Field(default=None, alias="bountyStarsLost")
    super_used_count: Optional[StrictInt] = Field(default=None, alias="superUsedCount")
    gadget_used_count: Optional[StrictInt] = Field(default=None, alias="gadgetUsedCount")
    bounty_picked_middle_star: Optional[StrictBool] = Field(default=None, alias="bountyPickedMiddleStar")
    match_end_kill_streak: Optional[StrictInt] = Field(default=None, alias="matchEndKillStreak")
    max_kill_streak: Optional[StrictInt] = Field(default=None, alias="maxKillStreak")
    hot_zone_inside_zone_percentage: Optional[StrictInt] = Field(default=None, alias="hotZoneInsideZonePercentage")
    healing_done_to_self: Optional[StrictInt] = Field(default=None, alias="healingDoneToSelf")
    healing_done_to_team_mates: Optional[StrictInt] = Field(default=None, alias="healingDoneToTeamMates")
    objectives_recovered: Optional[StrictInt] = Field(default=None, alias="objectivesRecovered")
    objectives_stolen: Optional[StrictInt] = Field(default=None, alias="objectivesStolen")
    brawl_ball_shots_on_goal: Optional[StrictInt] = Field(default=None, alias="brawlBallShotsOnGoal")
    brawl_ball_shots_saved: Optional[StrictInt] = Field(default=None, alias="brawlBallShotsSaved")
    __properties = ["healingDone", "deaths", "damageDealt", "kills", "averageLatency", "damageReceived", "totalDamageToSafe", "totalDamageToPets", "siegeDamageToRobot", "siegeBoltsCollected", "brawlBallGoalsScored", "gemGrabGemsCollected", "gemGrabGemsLost", "bountyStarsGained", "bountyStarsLost", "superUsedCount", "gadgetUsedCount", "bountyPickedMiddleStar", "matchEndKillStreak", "maxKillStreak", "hotZoneInsideZonePercentage", "healingDoneToSelf", "healingDoneToTeamMates", "objectivesRecovered", "objectivesStolen", "brawlBallShotsOnGoal", "brawlBallShotsSaved"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Stats:
        """Create an instance of Stats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Stats:
        """Create an instance of Stats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Stats.parse_obj(obj)

        _obj = Stats.parse_obj({
            "healing_done": obj.get("healingDone"),
            "deaths": obj.get("deaths"),
            "damage_dealt": obj.get("damageDealt"),
            "kills": obj.get("kills"),
            "average_latency": obj.get("averageLatency"),
            "damage_received": obj.get("damageReceived"),
            "total_damage_to_safe": obj.get("totalDamageToSafe"),
            "total_damage_to_pets": obj.get("totalDamageToPets"),
            "siege_damage_to_robot": obj.get("siegeDamageToRobot"),
            "siege_bolts_collected": obj.get("siegeBoltsCollected"),
            "brawl_ball_goals_scored": obj.get("brawlBallGoalsScored"),
            "gem_grab_gems_collected": obj.get("gemGrabGemsCollected"),
            "gem_grab_gems_lost": obj.get("gemGrabGemsLost"),
            "bounty_stars_gained": obj.get("bountyStarsGained"),
            "bounty_stars_lost": obj.get("bountyStarsLost"),
            "super_used_count": obj.get("superUsedCount"),
            "gadget_used_count": obj.get("gadgetUsedCount"),
            "bounty_picked_middle_star": obj.get("bountyPickedMiddleStar"),
            "match_end_kill_streak": obj.get("matchEndKillStreak"),
            "max_kill_streak": obj.get("maxKillStreak"),
            "hot_zone_inside_zone_percentage": obj.get("hotZoneInsideZonePercentage"),
            "healing_done_to_self": obj.get("healingDoneToSelf"),
            "healing_done_to_team_mates": obj.get("healingDoneToTeamMates"),
            "objectives_recovered": obj.get("objectivesRecovered"),
            "objectives_stolen": obj.get("objectivesStolen"),
            "brawl_ball_shots_on_goal": obj.get("brawlBallShotsOnGoal"),
            "brawl_ball_shots_saved": obj.get("brawlBallShotsSaved")
        })
        return _obj


