# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from brawlstars.generated.models.banned_brawler_entry import BannedBrawlerEntry
from brawlstars.generated.models.player_entry import PlayerEntry

class RegisterMatchRequest(BaseModel):
    """
    RegisterMatchRequest
    """
    mode: Optional[StrictStr] = None
    players: Optional[conlist(PlayerEntry)] = None
    location_id: Optional[StrictInt] = Field(default=None, alias="locationId")
    wins_required: Optional[StrictInt] = Field(default=None, alias="winsRequired")
    gadgets_allowed: Optional[StrictBool] = Field(default=None, alias="gadgetsAllowed")
    banned_brawlers: Optional[conlist(BannedBrawlerEntry)] = Field(default=None, alias="bannedBrawlers")
    timer_preset: Optional[StrictStr] = Field(default=None, alias="timerPreset")
    __properties = ["mode", "players", "locationId", "winsRequired", "gadgetsAllowed", "bannedBrawlers", "timerPreset"]

    @validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('regular', 'powerMatch',):
            raise ValueError("must be one of enum values ('regular', 'powerMatch')")
        return value

    @validator('timer_preset')
    def timer_preset_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('default', 'longer', 'longest',):
            raise ValueError("must be one of enum values ('default', 'longer', 'longest')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RegisterMatchRequest:
        """Create an instance of RegisterMatchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in players (list)
        _items = []
        if self.players:
            for _item in self.players:
                if _item:
                    _items.append(_item.to_dict())
            _dict['players'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in banned_brawlers (list)
        _items = []
        if self.banned_brawlers:
            for _item in self.banned_brawlers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bannedBrawlers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RegisterMatchRequest:
        """Create an instance of RegisterMatchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RegisterMatchRequest.parse_obj(obj)

        _obj = RegisterMatchRequest.parse_obj({
            "mode": obj.get("mode"),
            "players": [PlayerEntry.from_dict(_item) for _item in obj.get("players")] if obj.get("players") is not None else None,
            "location_id": obj.get("locationId"),
            "wins_required": obj.get("winsRequired"),
            "gadgets_allowed": obj.get("gadgetsAllowed"),
            "banned_brawlers": [BannedBrawlerEntry.from_dict(_item) for _item in obj.get("bannedBrawlers")] if obj.get("bannedBrawlers") is not None else None,
            "timer_preset": obj.get("timerPreset")
        })
        return _obj


