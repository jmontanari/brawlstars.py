# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from brawlstars.generated.configuration import Configuration


class BrawlerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trophy_change': 'int',
        'gears': 'GearInfoList',
        'star_power': 'StarPower',
        'gadget': 'Accessory',
        'power': 'int',
        'trophies': 'int',
        'name': 'JsonLocalizedName',
        'id': 'int'
    }

    attribute_map = {
        'trophy_change': 'trophyChange',
        'gears': 'gears',
        'star_power': 'starPower',
        'gadget': 'gadget',
        'power': 'power',
        'trophies': 'trophies',
        'name': 'name',
        'id': 'id'
    }

    def __init__(self, trophy_change=None, gears=None, star_power=None, gadget=None, power=None, trophies=None, name=None, id=None, _configuration=None):  # noqa: E501
        """BrawlerInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._trophy_change = None
        self._gears = None
        self._star_power = None
        self._gadget = None
        self._power = None
        self._trophies = None
        self._name = None
        self._id = None
        self.discriminator = None

        if trophy_change is not None:
            self.trophy_change = trophy_change
        if gears is not None:
            self.gears = gears
        if star_power is not None:
            self.star_power = star_power
        if gadget is not None:
            self.gadget = gadget
        if power is not None:
            self.power = power
        if trophies is not None:
            self.trophies = trophies
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id

    @property
    def trophy_change(self):
        """Gets the trophy_change of this BrawlerInfo.  # noqa: E501


        :return: The trophy_change of this BrawlerInfo.  # noqa: E501
        :rtype: int
        """
        return self._trophy_change

    @trophy_change.setter
    def trophy_change(self, trophy_change):
        """Sets the trophy_change of this BrawlerInfo.


        :param trophy_change: The trophy_change of this BrawlerInfo.  # noqa: E501
        :type: int
        """

        self._trophy_change = trophy_change

    @property
    def gears(self):
        """Gets the gears of this BrawlerInfo.  # noqa: E501


        :return: The gears of this BrawlerInfo.  # noqa: E501
        :rtype: GearInfoList
        """
        return self._gears

    @gears.setter
    def gears(self, gears):
        """Sets the gears of this BrawlerInfo.


        :param gears: The gears of this BrawlerInfo.  # noqa: E501
        :type: GearInfoList
        """

        self._gears = gears

    @property
    def star_power(self):
        """Gets the star_power of this BrawlerInfo.  # noqa: E501


        :return: The star_power of this BrawlerInfo.  # noqa: E501
        :rtype: StarPower
        """
        return self._star_power

    @star_power.setter
    def star_power(self, star_power):
        """Sets the star_power of this BrawlerInfo.


        :param star_power: The star_power of this BrawlerInfo.  # noqa: E501
        :type: StarPower
        """

        self._star_power = star_power

    @property
    def gadget(self):
        """Gets the gadget of this BrawlerInfo.  # noqa: E501


        :return: The gadget of this BrawlerInfo.  # noqa: E501
        :rtype: Accessory
        """
        return self._gadget

    @gadget.setter
    def gadget(self, gadget):
        """Sets the gadget of this BrawlerInfo.


        :param gadget: The gadget of this BrawlerInfo.  # noqa: E501
        :type: Accessory
        """

        self._gadget = gadget

    @property
    def power(self):
        """Gets the power of this BrawlerInfo.  # noqa: E501


        :return: The power of this BrawlerInfo.  # noqa: E501
        :rtype: int
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this BrawlerInfo.


        :param power: The power of this BrawlerInfo.  # noqa: E501
        :type: int
        """

        self._power = power

    @property
    def trophies(self):
        """Gets the trophies of this BrawlerInfo.  # noqa: E501


        :return: The trophies of this BrawlerInfo.  # noqa: E501
        :rtype: int
        """
        return self._trophies

    @trophies.setter
    def trophies(self, trophies):
        """Sets the trophies of this BrawlerInfo.


        :param trophies: The trophies of this BrawlerInfo.  # noqa: E501
        :type: int
        """

        self._trophies = trophies

    @property
    def name(self):
        """Gets the name of this BrawlerInfo.  # noqa: E501


        :return: The name of this BrawlerInfo.  # noqa: E501
        :rtype: JsonLocalizedName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BrawlerInfo.


        :param name: The name of this BrawlerInfo.  # noqa: E501
        :type: JsonLocalizedName
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this BrawlerInfo.  # noqa: E501


        :return: The id of this BrawlerInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BrawlerInfo.


        :param id: The id of this BrawlerInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BrawlerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BrawlerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BrawlerInfo):
            return True

        return self.to_dict() != other.to_dict()
