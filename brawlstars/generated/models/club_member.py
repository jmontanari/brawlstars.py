# coding: utf-8

"""
    Brawl Stars API

    Brawl Stars API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from brawlstars.generated.models.player_icon import PlayerIcon

class ClubMember(BaseModel):
    """
    ClubMember
    """
    icon: Optional[PlayerIcon] = None
    tag: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    trophies: Optional[StrictInt] = None
    role: Optional[StrictStr] = None
    name_color: Optional[StrictStr] = Field(default=None, alias="nameColor")
    __properties = ["icon", "tag", "name", "trophies", "role", "nameColor"]

    @validator('role')
    def role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('notMember', 'member', 'president', 'senior', 'vicePresident', 'unknown',):
            raise ValueError("must be one of enum values ('notMember', 'member', 'president', 'senior', 'vicePresident', 'unknown')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClubMember:
        """Create an instance of ClubMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of icon
        if self.icon:
            _dict['icon'] = self.icon.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClubMember:
        """Create an instance of ClubMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClubMember.parse_obj(obj)

        _obj = ClubMember.parse_obj({
            "icon": PlayerIcon.from_dict(obj.get("icon")) if obj.get("icon") is not None else None,
            "tag": obj.get("tag"),
            "name": obj.get("name"),
            "trophies": obj.get("trophies"),
            "role": obj.get("role"),
            "name_color": obj.get("nameColor")
        })
        return _obj


